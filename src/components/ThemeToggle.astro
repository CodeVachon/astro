---
const colors = ["0ea5e9", "db2777", "ea580c"];
const rgb = (hex: string) => {
    hex = hex.replace("#", "");

    const r = parseInt(hex.substring(0, 2), 16);
    const g = parseInt(hex.substring(2, 4), 16);
    const b = parseInt(hex.substring(4, 6), 16);
    return [r, g, b].join(" ");
};
---

<style>
    .sun {
        fill: theme("colors.primary");
    }
    .moon {
        fill: transparent;
    }

    :global(.dark) .sun {
        fill: transparent;
    }
    :global(.dark) .moon {
        fill: theme("colors.primary");
    }

    .theme-button {
        border: 0;
    }

    .theme-button .toggle {
        @apply bg-transparent transition-colors duration-200;
    }

    /* .theme-button.selected {
        @apply ring-8 ring-primary;
    } */

    .theme-button.selected .toggle {
        @apply bg-white;
    }

    .theme-button:hover .toggle {
        @apply bg-white/50;
    }

    :global(.dark) .theme-button.selected .toggle {
        @apply bg-gray-950;
    }

    :global(.dark) .theme-button:hover .toggle {
        @apply bg-gray-950/50;
    }
</style>

<script is:inline>
    const handleToggleClick = (e) => {
        if (e) {
            e.preventDefault();
            e.stopPropagation();
        }
        const element = document.documentElement;
        element.classList.toggle("dark");

        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
    };

    const setThemeColor = (color) => {
        if (!color) {
            return;
        }

        document.documentElement.style.setProperty("--color-primary", color);
        window.localStorage.setItem("theme-color", color);

        document.querySelectorAll(".theme-button").forEach((button) => {
            button.classList.remove("selected");
        });
        document
            .querySelector(".theme-button[data-value='" + color + "']")
            .classList.add("selected");
    };

    function pageSetup() {
        const theme = (() => {
            if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
                return localStorage.getItem("theme");
            }
            if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
                return "dark";
            }
            return "light";
        })();

        if (theme === "light") {
            document.documentElement.classList.remove("dark");
        } else {
            document.documentElement.classList.add("dark");
        }

        window.localStorage.setItem("theme", theme);

        const color = window.localStorage.getItem("theme-color");
        if (color) {
            setThemeColor(color);
        }

        const modeButton = document.getElementById("ThemeToggle");
        if (modeButton) {
            modeButton.addEventListener("click", handleToggleClick);
        }

        const themeButtons = document.querySelectorAll(".theme-button");
        for (const themeButton of themeButtons) {
            themeButton.addEventListener("click", (e) => {
                console.log("themeButton click");
                if (e) {
                    e.preventDefault();
                    e.stopPropagation();

                    const target = e.currentTarget;
                    const color = target.getAttribute("data-value");
                    setThemeColor(color);
                }
            });
        }
    }

    document.addEventListener("astro:page-load", () => {
        pageSetup();
    });
</script>

<ul class="flex items-center gap-2">
    <li class="flex items-center">
        <button
            id="ThemeToggle"
            class="size-8 rounded-full bg-transparent transition duration-200 hover:bg-primary/50 lg:size-6"
        >
            <svg class="h-full w-full" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path
                    class="sun"
                    fill-rule="evenodd"
                    d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
                ></path>
                <path
                    class="moon"
                    fill-rule="evenodd"
                    d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
                ></path>
            </svg>
        </button>
    </li>
    {
        colors.map((color, i) => (
            <li class="flex items-center">
                <button
                    class="theme-button flex size-8 items-center justify-center rounded-full lg:size-6"
                    data-value={rgb(color)}
                    style={{ backgroundColor: `#${color}` }}
                >
                    <span class="sr-only">color {i + 1}</span>
                    <span class="toggle block size-3 rounded-full" />
                </button>
            </li>
        ))
    }
</ul>
