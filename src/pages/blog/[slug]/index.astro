---
import dayjs from "dayjs";
import Layout from "~layouts/Layout.astro";
import { getCollection, getEntries, getEntry } from "astro:content";
import ArticleList from "~components/ArticleList.astro";
import MarkdownContent from "~components/MarkdownContent.astro";
import Badge from "~components/Badge.astro";
import { GithubIcon } from "~components/Icons";

export async function getStaticPaths() {
    const allBlogPosts = await getCollection("blog", ({ data }) => {
        return !data.draft;
    });

    return allBlogPosts.map((blogPost) => ({
        params: {
            slug: blogPost.slug
        }
    }));
}

const { slug } = Astro.params;

const entry = await getEntry("blog", slug);
const { Content } = await entry.render();

const bolsterArticles = await Promise.all([
    getCollection("blog", ({ data }) => {
        return data.tags.some(
            (tag) =>
                entry.data.tags.some((articleTag) => articleTag.slug === tag.slug) &&
                entry.data.title !== data.title
        );
    }).then((articles) => articles.reverse().slice(0, 3)),
    await getCollection("blog", ({ data }) => {
        return (
            !data.tags.some(
                (tag) =>
                    entry.data.tags.some((articleTag) => articleTag.slug === tag.slug) &&
                    entry.data.title !== data.title
            ) && data.title !== entry.data.title
            // !related.some((related) => related.data.title && data.title)
        );
    }).then((articles) => articles.reverse().slice(0, 3))
]).then((recordset) => recordset.flat().slice(0, 3));

const sharedArticles = await getCollection("blog", ({ slug }) => {
    return (entry.data.relatedPosts ?? []).some((related) => related.slug === slug);
});

while (sharedArticles.length < 3) {
    const article = bolsterArticles.shift();
    if (article) {
        sharedArticles.push(article);
    } else {
        break;
    }
}

const tags = await getEntries(entry.data.tags);
---

<Layout
    title={entry.data.title}
    description={entry.data.description}
    sideWidth="half"
    headerImage={typeof entry.data.image === "object" ? entry.data.image.src : entry.data.image}
>
    <article class="flex flex-col gap-8 lg:max-w-[750px]">
        <header class="border-b">
            <h1 class="font-serif text-4xl font-bold">{entry.data.title}</h1>
            <p class="text-slate-500">{dayjs(entry.data.date).format("YYYY-MM-DD")}</p>
        </header>

        <MarkdownContent>
            <Content />
        </MarkdownContent>

        <footer class="flex flex-col gap-4 border-t pt-4">
            {
                tags.length > 0 && (
                    <div class="flex items-center gap-4">
                        <p class="font-bold">Tags:</p>
                        <ul class="flex gap-2">
                            {tags.map((tag) => (
                                <li class="">
                                    <Badge href={`/blog/tags/${tag.slug}`}>{tag.data.name}</Badge>
                                </li>
                            ))}
                        </ul>
                    </div>
                )
            }
            <div>
                <a
                    href={`https://github.com/CodeVachon/astro/blob/main/src/content/blog/${slug}.md`}
                    target="_blank"
                    class="inline-flex items-center gap-2"
                >
                    <GithubIcon className="size-4" />
                    <span>View on GitHub</span>
                </a>
            </div>
        </footer>
    </article>
    <aside class="space-y-6 py-12">
        <h2 class="-mx-6 bg-slate-900 px-6 py-2 text-2xl font-bold text-white">Related Articles</h2>
        <ArticleList articles={sharedArticles.slice(0, 3)} grid />
    </aside>
</Layout>
